//light structure
struct Light 
{
	float3 position;
	float3 color;
};

void FS_multPixelLight(float3 vertPos		: TEXCOORD0,
						float2 texCoord		: TEXCOORD1,
						float3x3 TBN		: TEXCOORD2,

						out float4 outColor : COLOR,

						uniform sampler2D decalMap,
						uniform sampler2D normalMap,
						uniform float3	  cameraPosition,
						uniform Light	  lights[7],
						uniform float	  lightFallOffExp,
						uniform float4x4  matrixModelWorld,
						uniform float	  specularPower)
{
	float4x4 invWorldObj = inverse(matrixModelWorld);
	cameraPosition = mul(invWorldObj, float4(cameraPosition, 1)).xyz;
	
	//sample normal from texture
	float3 normal = tex2D(normalMap, texCoord).xyz;
	normal = normalize(normal * 2.0 - 1.0);
	normal = normalize(mul(TBN, normal).xyz);

	//initialize light color variables
	float3 diffuseSum = float3(0.0, 0.0, 0.0);
	float3 specularSum = float3(0.0, 0.0, 0.0);

	//loop through each light and add them up for a final color
	for (int i = 0; i < 7; i++)
	{
		lights[i].position = mul(invWorldObj, float4(lights[i].position, 1)).xyz;

		float3 lightDir = lights[i].position - vertPos;
		float fallOff = saturate(1 / exp(length(lightDir) * lightFallOffExp));

		// Compute the diffuse lighting
		float3 L = normalize(lightDir);
		float diffuseLight = max(dot(normal, L), 0) * fallOff;
		float3 diffuseResult = lights[i].color * diffuseLight;

		// Compute the specular lighting
		float3 V = normalize(cameraPosition - vertPos);
		float3 H = normalize(L + V);
		float specularLight = pow(max(dot(normal, H), 0), specularPower) * fallOff;

		if (diffuseLight <= 0.01) 
			specularLight = 0.01;

		float3 specularResult = lights[i].color * specularLight;

		diffuseSum += diffuseResult;
		specularSum += specularResult;
	}

	float3 objectColor = tex2D(decalMap, texCoord).xyz;
	
	outColor = float4((diffuseSum + specularSum) * objectColor, 1.0);
}
