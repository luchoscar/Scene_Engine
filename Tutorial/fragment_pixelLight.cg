void FS_pixelLight(float4 color	: COLOR,
						float2 texCoord		: TEXCOORD0,
						float3 lightDir		: TEXCOORD1,
						float3 camDir		: TEXCOORD2,
						float3x3 TBN		: TEXCOORD3,

						out float4 outColor : COLOR,

						uniform sampler2D decalMap,
						uniform sampler2D normalMap,
						uniform float3	  lightColor,
						uniform float lightFallOffExp)
{
	float fallOff = saturate(1 / exp(length(lightDir) * lightFallOffExp));

	lightDir = normalize(lightDir);

	//calculate normal
	float3 normal = tex2D(normalMap, texCoord).xyz;
	normal = normalize(normal * 2.0 - 1.0);
	normal = normalize(mul(TBN, normal));

	float diffInt = 0.0;
	float specInt = 0.0;

	//calculate diffuse vertex light intensity 
	diffInt = dot(normal, lightDir);

	//calculate spec light
	if (diffInt > 0.001)
	{
		float3 H = normalize(lightDir + camDir);
		specInt = pow(saturate(dot(H, normal)), 100.0);
	}
	
	diffInt = max(diffInt, 0.001);
	diffInt = diffInt * fallOff;

	float3 decalColor = tex2D(decalMap, texCoord).xyz;

	float3 diffuseLight = diffInt * decalColor;

	//make specular a percentage value of diffuse light
	float3 specLight = specInt * decalColor * diffInt;

	lightColor = (diffuseLight + specLight) * lightColor;

	outColor = float4((lightColor * color.rgb), 0.5);
}
